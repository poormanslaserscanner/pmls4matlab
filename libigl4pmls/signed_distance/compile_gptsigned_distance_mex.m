path_to_libigl=[fileparts(mfilename('fullpath')), '/../libigl'];
MEXOPTS={'-v','-largeArrayDims','-DMEX'};
MSSE42='CXXFLAGS=$CXXFLAGS -msse4.2';
STDCPP11='CXXFLAGS=$CXXFLAGS -std=c++11';
OPENMP= 'COMPFLAGS=$COMPFLAGS /openmp';
OPENMPL = 'LINKFLAGS=$LINKFLAGS /nodefaultlib:vcomp';
pmls_dir = getenv('PMLS_INSTALL_DIR');
EIGEN_INC=['-I', pmls_dir, '/Eigen/include/eigen3'];
% See libigl documentation. In short, Libigl is a header-only library by
% default: no compilation needed (like Eigen). There's an advanced **option**
% to precompile libigl as a static library. This cuts down on compilation time.
% It is optional and more difficult to set up. Set this to true only if you
% know what you're doing.
use_libigl_static_library = false;
LIBIGL_INC=sprintf('-I%s/include',path_to_libigl);
  % `mex` has a silly requirement that arguments be non-empty, hence the NOOP
  % defines
  LIBIGL_FLAGS=strsplit('-DIGL_NO_CORK -DEIGEN_CHOLMOD_SUPPORT -DEIGEN_UMFPACK_SUPPORT -DEIGEN_METIS_SUPPORT -DEIGEN_SPQR_SUPPORT');
  LIBIGL_LIB={'-DIGL_SKIP'};
  LIBIGL_LIBMATLAB='-DIGL_SKIP';
  LIBIGL_LIBEMBREE='-DIGL_SKIP';
  LIBIGL_LIBCGAL='-DIGL_SKIP';
  LIBIGL_LIBCORK='-DIGL_SKIP';
LIBIGL_BASE={LIBIGL_INC,LIBIGL_FLAGS{:},LIBIGL_LIB{:},LIBIGL_LIBMATLAB};


mex( ...
  MEXOPTS{:}, MSSE42, STDCPP11, OPENMP, OPENMPL,...
  LIBIGL_BASE{:},EIGEN_INC, ...
  'signed_distance.cpp', 'libiomp5md.lib');


% mex( ...
%   MEXOPTS{:}, MSSE42, STDCPP11, ...
%   LIBIGL_BASE{:},EIGEN_INC, ...
%   CGAL_INC{:},CGAL_LIB{:},CGAL_FLAGS, ...
%   LIBIGL_LIBCGAL, LIBIGL_LIBCORK, ...
%   BOOST_INC,BOOST_LIB{:}, ...
%   'mesh_boolean.cpp');
% mex( ...
%   MEXOPTS{:}, MSSE42, STDCPP11, ...
%   LIBIGL_BASE{:},EIGEN_INC, ...
%   CGAL_INC,CGAL_LIB{:},CGAL_FLAGS, ...
%   LIBIGL_LIBCGAL, LIBIGL_LIBCORK, ...
%   CORK_INC,CORK_LIB{:}, ...
%   BOOST_INC,BOOST_LIB{:}, ...
%   'mesh_boolean.cpp');

